//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""08d0872c-304a-4683-a739-5c6b6b697e7b"",
            ""actions"": [
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""2cdc4f6b-7345-4300-9275-b43e3472e27c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arpeggio"",
                    ""type"": ""Value"",
                    ""id"": ""0a3c5bbb-0ed5-40ff-a154-dd3296387e60"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TunnelUp"",
                    ""type"": ""Button"",
                    ""id"": ""1d54f14b-437c-44be-aebf-f8ed7c10f365"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TunnelDown"",
                    ""type"": ""Button"",
                    ""id"": ""13e88d0b-a0d3-4a58-aa78-980e5eed788e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TunnelLeft"",
                    ""type"": ""Button"",
                    ""id"": ""1feed3a0-695d-4736-beae-15e481e5a56c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TunnelRight"",
                    ""type"": ""Button"",
                    ""id"": ""82b1d60a-ea9f-4b67-ae1b-2476fe359f1e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""ee4b0acd-8af8-4753-8036-63f66bd04fa3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fee4c648-ee71-4f77-88a5-7714abe63e74"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edf65aa8-7992-413b-af67-96f279315c05"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fc38a95-88d3-46b4-a868-93ae48dc0424"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75cb78d5-08da-4eb9-9bd5-8945b6bd4bae"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fba5d46d-4781-4513-ae0c-738216908830"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arpeggio"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3abedc72-2ac5-40e2-a70c-6f126f11e0ed"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TunnelUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9669ef5a-cfbc-4a6e-babf-370a39e82f16"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TunnelUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3f5a199-87dc-4733-a286-8fa0adc98e4c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TunnelDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""959cf0e7-0563-4d6e-9dc4-9febff445854"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TunnelDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""424ba695-bd58-4fe9-a98e-663a9cedcdb2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TunnelLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""711f55dd-0baa-415b-8458-9f89d4403135"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TunnelLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61d33e3d-a37e-44ac-b96d-7885953e2636"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TunnelRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""053cd4f6-be69-4a52-bbcc-d3ee5dca696f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TunnelRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88e7c43e-d03f-4c99-8ce7-e045f2061674"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2885fec0-2783-45b4-bb03-268c9a6a8a98"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94ba3283-2365-45d6-b2d3-9b885bf5846c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8263d73a-dbb6-4a70-aa8e-47a5b60cabc7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59b55efa-2e3e-4687-90a4-a578d088dab9"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Kick = m_Player.FindAction("Kick", throwIfNotFound: true);
        m_Player_Arpeggio = m_Player.FindAction("Arpeggio", throwIfNotFound: true);
        m_Player_TunnelUp = m_Player.FindAction("TunnelUp", throwIfNotFound: true);
        m_Player_TunnelDown = m_Player.FindAction("TunnelDown", throwIfNotFound: true);
        m_Player_TunnelLeft = m_Player.FindAction("TunnelLeft", throwIfNotFound: true);
        m_Player_TunnelRight = m_Player.FindAction("TunnelRight", throwIfNotFound: true);
        m_Player_Start = m_Player.FindAction("Start", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputActions.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Kick;
    private readonly InputAction m_Player_Arpeggio;
    private readonly InputAction m_Player_TunnelUp;
    private readonly InputAction m_Player_TunnelDown;
    private readonly InputAction m_Player_TunnelLeft;
    private readonly InputAction m_Player_TunnelRight;
    private readonly InputAction m_Player_Start;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Kick => m_Wrapper.m_Player_Kick;
        public InputAction @Arpeggio => m_Wrapper.m_Player_Arpeggio;
        public InputAction @TunnelUp => m_Wrapper.m_Player_TunnelUp;
        public InputAction @TunnelDown => m_Wrapper.m_Player_TunnelDown;
        public InputAction @TunnelLeft => m_Wrapper.m_Player_TunnelLeft;
        public InputAction @TunnelRight => m_Wrapper.m_Player_TunnelRight;
        public InputAction @Start => m_Wrapper.m_Player_Start;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Kick.started += instance.OnKick;
            @Kick.performed += instance.OnKick;
            @Kick.canceled += instance.OnKick;
            @Arpeggio.started += instance.OnArpeggio;
            @Arpeggio.performed += instance.OnArpeggio;
            @Arpeggio.canceled += instance.OnArpeggio;
            @TunnelUp.started += instance.OnTunnelUp;
            @TunnelUp.performed += instance.OnTunnelUp;
            @TunnelUp.canceled += instance.OnTunnelUp;
            @TunnelDown.started += instance.OnTunnelDown;
            @TunnelDown.performed += instance.OnTunnelDown;
            @TunnelDown.canceled += instance.OnTunnelDown;
            @TunnelLeft.started += instance.OnTunnelLeft;
            @TunnelLeft.performed += instance.OnTunnelLeft;
            @TunnelLeft.canceled += instance.OnTunnelLeft;
            @TunnelRight.started += instance.OnTunnelRight;
            @TunnelRight.performed += instance.OnTunnelRight;
            @TunnelRight.canceled += instance.OnTunnelRight;
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Kick.started -= instance.OnKick;
            @Kick.performed -= instance.OnKick;
            @Kick.canceled -= instance.OnKick;
            @Arpeggio.started -= instance.OnArpeggio;
            @Arpeggio.performed -= instance.OnArpeggio;
            @Arpeggio.canceled -= instance.OnArpeggio;
            @TunnelUp.started -= instance.OnTunnelUp;
            @TunnelUp.performed -= instance.OnTunnelUp;
            @TunnelUp.canceled -= instance.OnTunnelUp;
            @TunnelDown.started -= instance.OnTunnelDown;
            @TunnelDown.performed -= instance.OnTunnelDown;
            @TunnelDown.canceled -= instance.OnTunnelDown;
            @TunnelLeft.started -= instance.OnTunnelLeft;
            @TunnelLeft.performed -= instance.OnTunnelLeft;
            @TunnelLeft.canceled -= instance.OnTunnelLeft;
            @TunnelRight.started -= instance.OnTunnelRight;
            @TunnelRight.performed -= instance.OnTunnelRight;
            @TunnelRight.canceled -= instance.OnTunnelRight;
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnKick(InputAction.CallbackContext context);
        void OnArpeggio(InputAction.CallbackContext context);
        void OnTunnelUp(InputAction.CallbackContext context);
        void OnTunnelDown(InputAction.CallbackContext context);
        void OnTunnelLeft(InputAction.CallbackContext context);
        void OnTunnelRight(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
    }
}
